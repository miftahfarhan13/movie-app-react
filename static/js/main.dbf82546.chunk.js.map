{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","tittle","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","style","marginBottom","fontSize","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","title","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dbf82546.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios.js';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ tittle, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // if [], run once when the row loads, and dont run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            console.log(request.data.results);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    console.log(movies);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            }).catch((error) => console.log(error));\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 style={{\r\n                marginBottom: \"10px\",\r\n                fontSize:\"15px\"\r\n            }}>\r\n            {tittle}\r\n            </h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie) => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}\r\n                    />    \r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"312582920fd7603b69f03439e144b0dc\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios.js';\r\nimport requests from './requests.js';\r\nimport './Banner.css';\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    console.log(movie)\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header \r\n            className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition: \"center center\",\r\n            }}\r\n            >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            \r\n            <div className=\"banner__fadeBottom\"></div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useEffect, useState} from 'react'\r\nimport './Navbar.css'\r\n\r\nfunction Navbar() {\r\n\r\n    const[show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return() => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://lh3.googleusercontent.com/proxy/iYfxdDHRfYVMGHHBJVBAZEoG7LM2yEfkToLrzfypRDJoMJsf-iq9PatPlK8s7uloEF27duxFEHb2xcc5efqNNfdzUb6q1QS_z3F6ky_M88LmK5GjlIU\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row.js'\nimport requests from './requests.js'\nimport Banner from './Banner.js'\nimport Navbar from './Navbar.js'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar/>\n      <Banner/>\n      <Row \n        tittle=\"Netflix Originals\" \n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row tittle=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row tittle=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row tittle=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row tittle=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row tittle=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row tittle=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row tittle=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}